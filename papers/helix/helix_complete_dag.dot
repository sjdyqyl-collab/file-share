digraph Helix_16GPU_TwoLevel_Complete {
    rankdir=TB;
    node [shape=box, style=filled, fontname="Courier"];
    
    // Global parameters
    B = 1024;  // Batch size
    L = 2048;  // Sequence length
    D = 4096;  // Embedding dimension
    h = 128;   // Number of heads
    d = 32;    // Dimension per head (D/h)
    
    // Partitioning parameters
    n = 4;     // Head groups
    m = 4;     // Dimension slices per head
    h_g = 32;  // Heads per group (h/n)
    d_s = 8;   // Dimension per slice (d/m)
    
    // Input
    Input [label="Input X\n[B=1024×L=2048×D=4096]\nFP16", shape=ellipse, fillcolor=yellow, penwidth=3];
    
    // Layer 1: Multi-Head Attention with Two-Level Partitioning
    subgraph cluster_layer1 {
        label="Layer 1: MHA (m=4, n=4)";
        style=rounded;
        
        // Query projections - Column Parallel Linear (Megatron style)
        Q_proj_0 [label="Q Proj\nGPU0\nColParallel\nW_Q[0,0]\n[B×L×d_s×h_g]\n=1024×2048×8×32", fillcolor=lightgreen];
        Q_proj_1 [label="Q Proj\nGPU1\nColParallel\nW_Q[0,1]\n[B×L×d_s×h_g]", fillcolor=lightgreen];
        Q_proj_2 [label="Q Proj\nGPU2\nColParallel\nW_Q[0,2]\n[B×L×d_s×h_g]", fillcolor=lightgreen];
        Q_proj_3 [label="Q Proj\nGPU3\nColParallel\nW_Q[0,3]\n[B×L×d_s×h_g]", fillcolor=lightgreen];
        Q_proj_4 [label="Q Proj\nGPU4\nColParallel\nW_Q[1,0]\n[B×L×d_s×h_g]", fillcolor=lightgreen];
        Q_proj_5 [label="Q Proj\nGPU5\nColParallel\nW_Q[1,1]\n[B×L×d_s×h_g]", fillcolor=lightgreen];
        Q_proj_6 [label="Q Proj\nGPU6\nColParallel\nW_Q[1,2]\n[B×L×d_s×h_g]", fillcolor=lightgreen];
        Q_proj_7 [label="Q Proj\nGPU7\nColParallel\nW_Q[1,3]\n[B×L×d_s×h_g]", fillcolor=lightgreen];
        Q_proj_8 [label="Q Proj\nGPU8\nColParallel\nW_Q[2,0]\n[B×L×d_s×h_g]", fillcolor=lightgreen];
        Q_proj_9 [label="Q Proj\nGPU9\nColParallel\nW_Q[2,1]\n[B×L×d_s×h_g]", fillcolor=lightgreen];
        Q_proj_10 [label="Q Proj\nGPU10\nColParallel\nW_Q[2,2]\n[B×L×d_s×h_g]", fillcolor=lightgreen];
        Q_proj_11 [label="Q Proj\nGPU11\nColParallel\nW_Q[2,3]\n[B×L×d_s×h_g]", fillcolor=lightgreen];
        Q_proj_12 [label="Q Proj\nGPU12\nColParallel\nW_Q[3,0]\n[B×L×d_s×h_g]", fillcolor=lightgreen];
        Q_proj_13 [label="Q Proj\nGPU13\nColParallel\nW_Q[3,1]\n[B×L×d_s×h_g]", fillcolor=lightgreen];
        Q_proj_14 [label="Q Proj\nGPU14\nColParallel\nW_Q[3,2]\n[B×L×d_s×h_g]", fillcolor=lightgreen];
        Q_proj_15 [label="Q Proj\nGPU15\nColParallel\nW_Q[3,3]\n[B×L×d_s×h_g]", fillcolor=lightgreen];
        
        // Key projections
        K_proj_0 [label="K Proj\nGPU0\nColParallel\nW_K[0,0]\n[B×L×d_s×h_g]", fillcolor=lightgreen];
        K_proj_1 [label="K Proj\nGPU1\nColParallel\nW_K[0,1]\n[B×L×d_s×h_g]", fillcolor=lightgreen];
        K_proj_2 [label="K Proj\nGPU2\nColParallel\nW_K[0,2]\n[B×L×d_s×h_g]", fillcolor=lightgreen];
        K_proj_3 [label="K Proj\nGPU3\nColParallel\nW_K[0,3]\n[B×L×d_s×h_g]", fillcolor=lightgreen];
        K_proj_4 [label="K Proj\nGPU4\nColParallel\nW_K[1,0]\n[B×L×d_s×h_g]", fillcolor=lightgreen];
        K_proj_5 [label="K Proj\nGPU5\nColParallel\nW_K[1,1]\n[B×L×d_s×h_g]", fillcolor=lightgreen];
        K_proj_6 [label="K Proj\nGPU6\nColParallel\nW_K[1,2]\n[B×L×d_s×h_g]", fillcolor=lightgreen];
        K_proj_7 [label="K Proj\nGPU7\nColParallel\nW_K[1,3]\n[B×L×d_s×h_g]", fillcolor=lightgreen];
        K_proj_8 [label="K Proj\nGPU8\nColParallel\nW_K[2,0]\n[B×L×d_s×h_g]", fillcolor=lightgreen];
        K_proj_9 [label="K Proj\nGPU9\nColParallel\nW_K[2,1]\n[B×L×d_s×h_g]", fillcolor=lightgreen];
        K_proj_10 [label="K Proj\nGPU10\nColParallel\nW_K[2,2]\n[B×L×d_s×h_g]", fillcolor=lightgreen];
        K_proj_11 [label="K Proj\nGPU11\nColParallel\nW_K[2,3]\n[B×L×d_s×h_g]", fillcolor=lightgreen];
        K_proj_12 [label="K Proj\nGPU12\nColParallel\nW_K[3,0]\n[B×L×d_s×h_g]", fillcolor=lightgreen];
        K_proj_13 [label="K Proj\nGPU13\nColParallel\nW_K[3,1]\n[B×L×d_s×h_g]", fillcolor=lightgreen];
        K_proj_14 [label="K Proj\nGPU14\nColParallel\nW_K[3,2]\n[B×L×d_s×h_g]", fillcolor=lightgreen];
        K_proj_15 [label="K Proj\nGPU15\nColParallel\nW_K[3,3]\n[B×L×d_s×h_g]", fillcolor=lightgreen];
        
        // Value projections
        V_proj_0 [label="V Proj\nGPU0\nColParallel\nW_V[0,0]\n[B×L×d_s×h_g]", fillcolor=lightgreen];
        V_proj_1 [label="V Proj\nGPU1\nColParallel\nW_V[0,1]\n[B×L×d_s×h_g]", fillcolor=lightgreen];
        V_proj_2 [label="V Proj\nGPU2\nColParallel\nW_V[0,2]\n[B×L×d_s×h_g]", fillcolor=lightgreen];
        V_proj_3 [label="V Proj\nGPU3\nColParallel\nW_V[0,3]\n[B×L×d_s×h_g]", fillcolor=lightgreen];
        V_proj_4 [label="V Proj\nGPU4\nColParallel\nW_V[1,0]\n[B×L×d_s×h_g]", fillcolor=lightgreen];
        V_proj_5 [label="V Proj\nGPU5\nColParallel\nW_V[1,1]\n[B×L×d_s×h_g]", fillcolor=lightgreen];
        V_proj_6 [label="V Proj\nGPU6\nColParallel\nW_V[1,2]\n[B×L×d_s×h_g]", fillcolor=lightgreen];
        V_proj_7 [label="V Proj\nGPU7\nColParallel\nW_V[1,3]\n[B×L×d_s×h_g]", fillcolor=lightgreen];
        V_proj_8 [label="V Proj\nGPU8\nColParallel\nW_V[2,0]\n[B×L×d_s×h_g]", fillcolor=lightgreen];
        V_proj_9 [label="V Proj\nGPU9\nColParallel\nW_V[2,1]\n[B×L×d_s×h_g]", fillcolor=lightgreen];
        V_proj_10 [label="V Proj\nGPU10\nColParallel\nW_V[2,2]\n[B×L×d_s×h_g]", fillcolor=lightgreen];
        V_proj_11 [label="V Proj\nGPU11\nColParallel\nW_V[2,3]\n[B×L×d_s×h_g]", fillcolor=lightgreen];
        V_proj_12 [label="V Proj\nGPU12\nColParallel\nW_V[3,0]\n[B×L×d_s×h_g]", fillcolor=lightgreen];
        V_proj_13 [label="V Proj\nGPU13\nColParallel\nW_V[3,1]\n[B×L×d_s×h_g]", fillcolor=lightgreen];
        V_proj_14 [label="V Proj\nGPU14\nColParallel\nW_V[3,2]\n[B×L×d_s×h_g]", fillcolor=lightgreen];
        V_proj_15 [label="V Proj\nGPU15\nColParallel\nW_V[3,3]\n[B×L×d_s×h_g]", fillcolor=lightgreen];
        
        // Attention computations
        Attn0 [label="Attention\nGPU0\nSoftmax(QK^T/√d_s)V\n[B×L×d_s×h_g]", fillcolor=orange];
        Attn1 [label="Attention\nGPU1\nSoftmax(QK^T/√d_s)V\n[B×L×d_s×h_g]", fillcolor=orange];
        Attn2 [label="Attention\nGPU2\nSoftmax(QK^T/√d_s)V\n[B×L×d_s×h_g]", fillcolor=orange];
        Attn3 [label="Attention\nGPU3\nSoftmax(QK^T/√d_s)V\n[B×L×d_s×h_g]", fillcolor=orange];
        Attn4 [label="Attention\nGPU4\nSoftmax(QK^T/√d_s)V\n[B×L×d_s×h_g]", fillcolor=orange];
        Attn5 [label="Attention\nGPU5\nSoftmax(QK^T/√d_s)V\n[B×L×d_s×h_g]", fillcolor=orange];
        Attn6 [label="Attention\nGPU6\nSoftmax(QK^T/√d_s)V\n[B×L×d_s×h_g]", fillcolor=orange];
        Attn7 [label="Attention\nGPU7\nSoftmax(QK^T/√d_s)V\n[B×L×d_s×h_g]", fillcolor=orange];
        Attn8 [label="Attention\nGPU8\nSoftmax(QK^T/√d_s)V\n[B×L×d_s×h_g]", fillcolor=orange];
        Attn9 [label="Attention\nGPU9\nSoftmax(QK^T/√d_s)V\n[B×L×d_s×h_g]", fillcolor=orange];
        Attn10 [label="Attention\nGPU10\nSoftmax(QK^T/√d_s)V\n[B×L×d_s×h_g]", fillcolor=orange];
        Attn11 [label="Attention\nGPU11\nSoftmax(QK^T/√d_s)V\n[B×L×d_s×h_g]", fillcolor=orange];
        Attn12 [label="Attention\nGPU12\nSoftmax(QK^T/√d_s)V\n[B×L×d_s×h_g]", fillcolor=orange];
        Attn13 [label="Attention\nGPU13\nSoftmax(QK^T/√d_s)V\n[B×L×d_s×h_g]", fillcolor=orange];
        Attn14 [label="Attention\nGPU14\nSoftmax(QK^T/√d_s)V\n[B×L×d_s×h_g]", fillcolor=orange];
        Attn15 [label="Attention\nGPU15\nSoftmax(QK^T/√d_s)V\n[B×L×d_s×h_g]", fillcolor=orange];
        
        // Intra-head concatenation (gather dimension slices)
        Concat_dim_0 [label="Concat Dim\nGPU0-3\nAllGather\n[B×L×d×h_g]\n=1024×2048×32×32", fillcolor=purple];
        Concat_dim_1 [label="Concat Dim\nGPU4-7\nAllGather\n[B×L×d×h_g]", fillcolor=purple];
        Concat_dim_2 [label="Concat Dim\nGPU8-11\nAllGather\n[B×L×d×h_g]", fillcolor=purple];
        Concat_dim_3 [label="Concat Dim\nGPU12-15\nAllGather\n[B×L×d×h_g]", fillcolor=purple];
        
        // Inter-head concatenation (gather head groups)
        Concat_heads [label="Concat Heads\nAll GPUs\nAllGather\n[B×L×D]\n=1024×2048×4096", fillcolor=purple];
        
        // Output projection (Row Parallel Linear)
        Out_proj [label="Output Proj\nAll GPUs\nRowParallel\nW_O\n[B×L×D]", fillcolor=lightblue];
        
        // Residual connection and LayerNorm
        Residual1 [label="Residual + LayerNorm\nAll GPUs\n[B×L×D]", fillcolor=pink];
    }
    
    // Layer 2: Feed Forward Network
    subgraph cluster_layer2 {
        label="Layer 2: FFN (Dense)";
        style=rounded;
        
        // FFN expansion (Column Parallel)
        FFN_expand_0 [label="FFN Expand\nGPU0-7\nColParallel\nW1\n[B×L×4D/8]", fillcolor=gray];
        FFN_expand_1 [label="FFN Expand\nGPU8-15\nColParallel\nW1\n[B×L×4D/8]", fillcolor=gray];
        
        // Activation
        GELU_0 [label="GELU\nGPU0-7\n[B×L×4D/8]", fillcolor=gray];
        GELU_1 [label="GELU\nGPU8-15\n[B×L×4D/8]", fillcolor=gray];
        
        // FFN contraction (Row Parallel)
        FFN_contract_0 [label="FFN Contract\nGPU0-7\nRowParallel\nW2\n[B×L×D/8]", fillcolor=gray];
        FFN_contract_1 [label="FFN Contract\nGPU8-15\nRowParallel\nW2\n[B×L×D/8]", fillcolor=gray];
        
        // AllReduce for FFN output
        FFN_allreduce [label="AllReduce\nAll GPUs\n[B×L×D]", fillcolor=gray];
        
        // Residual connection and LayerNorm
        Residual2 [label="Residual + LayerNorm\nAll GPUs\n[B×L×D]", fillcolor=pink];
    }
    
    // Layer 3: MHA (same as Layer 1)
    subgraph cluster_layer3 {
        label="Layer 3: MHA (m=4, n=4)";
        style=rounded;
        
        // Similar structure to Layer 1
        MHA2_out [label="MHA Layer 2\nAll GPUs\n[B×L×D]", fillcolor=lightgreen