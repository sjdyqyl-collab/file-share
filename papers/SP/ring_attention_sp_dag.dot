digraph RingAttentionSP {
    rankdir=TB;
    node [shape=box, style=filled, fontname="Arial"];
    
    // Input nodes
    subgraph cluster_input {
        label="Input Sequence (B×L×d_model)";
        style=dashed;
        Input [label="Full Sequence\nB×L×d_model", shape=ellipse, fillcolor=lightblue];
    }
    
    // Sequence Parallelism Split
    subgraph cluster_split {
        label="Sequence Parallelism Split (L/16)";
        style=dashed;
        Split [label="Split Sequence\n16 parts", shape=ellipse, fillcolor=lightgreen];
    }
    
    // GPU clusters - 16 GPUs
    subgraph cluster_gpu0 {
        label="GPU 0";
        style=rounded;
        color=blue;
        X0 [label="X_0\nB×(L/16)×d_model", fillcolor=lightyellow];
        Q0 [label="Linear Q\nB×(L/16)×d_h\n(Column Parallel)", fillcolor=lightcoral];
        K0 [label="Linear K\nB×(L/16)×d_h\n(Column Parallel)", fillcolor=lightcoral];
        V0 [label="Linear V\nB×(L/16)×d_h\n(Column Parallel)", fillcolor=lightcoral];
        
        // Ring stages for GPU 0
        stage0_0 [label="Stage 0\nAttn(Q_0, K_0, V_0)", fillcolor=lightcyan];
        stage1_0 [label="Stage 1\nAttn(Q_0, K_15, V_15)", fillcolor=lightcyan];
        stage2_0 [label="Stage 2\nAttn(Q_0, K_14, V_14)", fillcolor=lightcyan];
        stage15_0 [label="Stage 15\nAttn(Q_0, K_1, V_1)", fillcolor=lightcyan];
        
        output0 [label="Output_0\nB×(L/16)×d_model", fillcolor=lightgreen];
    }
    
    subgraph cluster_gpu1 {
        label="GPU 1";
        style=rounded;
        color=blue;
        X1 [label="X_1\nB×(L/16)×d_model", fillcolor=lightyellow];
        Q1 [label="Linear Q\nB×(L/16)×d_h\n(Column Parallel)", fillcolor=lightcoral];
        K1 [label="Linear K\nB×(L/16)×d_h\n(Column Parallel)", fillcolor=lightcoral];
        V1 [label="Linear V\nB×(L/16)×d_h\n(Column Parallel)", fillcolor=lightcoral];
        
        stage0_1 [label="Stage 0\nAttn(Q_1, K_1, V_1)", fillcolor=lightcyan];
        stage1_1 [label="Stage 1\nAttn(Q_1, K_0, V_0)", fillcolor=lightcyan];
        stage15_1 [label="Stage 15\nAttn(Q_1, K_2, V_2)", fillcolor=lightcyan];
        
        output1 [label="Output_1\nB×(L/16)×d_model", fillcolor=lightgreen];
    }
    
    // Continue pattern for GPUs 2-14
    subgraph cluster_gpu2 {
        label="GPU 2";
        style=rounded;
        color=blue;
        X2 [label="X_2\nB×(L/16)×d_model", fillcolor=lightyellow];
        Q2 [label="Linear Q\nB×(L/16)×d_h\n(Column Parallel)", fillcolor=lightcoral];
        K2 [label="Linear K\nB×(L/16)×d_h\n(Column Parallel)", fillcolor=lightcoral];
        V2 [label="Linear V\nB×(L/16)×d_h\n(Column Parallel)", fillcolor=lightcoral];
        
        stage0_2 [label="Stage 0\nAttn(Q_2, K_2, V_2)", fillcolor=lightcyan];
        stage1_2 [label="Stage 1\nAttn(Q_2, K_1, V_1)", fillcolor=lightcyan];
        stage15_2 [label="Stage 15\nAttn(Q_2, K_3, V_3)", fillcolor=lightcyan];
        
        output2 [label="Output_2\nB×(L/16)×d_model", fillcolor=lightgreen];
    }
    
    subgraph cluster_gpu15 {
        label="GPU 15";
        style=rounded;
        color=blue;
        X15 [label="X_15\nB×(L/16)×d_model", fillcolor=lightyellow];
        Q15 [label="Linear Q\nB×(L/16)×d_h\n(Column Parallel)", fillcolor=lightcoral];
        K15 [label="Linear K\nB×(L/16)×d_h\n(Column Parallel)", fillcolor=lightcoral];
        V15 [label="Linear V\nB×(L/16)×d_h\n(Column Parallel)", fillcolor=lightcoral];
        
        stage0_15 [label="Stage 0\nAttn(Q_15, K_15, V_15)", fillcolor=lightcyan];
        stage1_15 [label="Stage 1\nAttn(Q_15, K_14, V_14)", fillcolor=lightcyan];
        stage15_15 [label="Stage 15\nAttn(Q_15, K_0, V_0)", fillcolor=lightcyan];
        
        output15 [label="Output_15\nB×(L/16)×d_model", fillcolor=lightgreen];
    }
    
    // Communication edges - Ring topology
    edge [color=red, style=dashed, label="KV Block"];
    K0 -> stage1_1;
    V0 -> stage1_1;
    K1 -> stage1_2;
    V1 -> stage1_2;
    K15 -> stage1_0;
    V15 -> stage1_0;
    
    // Continue ring communication pattern
    K0 -> stage2_2;
    V0 -> stage2_2;
    K1 -> stage2_3;
    V1 -> stage2_3;
    // ... (pattern continues for all stages)
    
    // Main data flow
    Input -> Split;
    Split -> X0;
    Split -> X1;
    Split -> X2;
    Split -> X15;
    
    X0 -> Q0;
    X0 -> K0;
    X0 -> V0;
    X1 -> Q1;
    X1 -> K1;
    X1 -> V1;
    X2 -> Q2;
    X2 -> K2;
    X2 -> V2;
    X15 -> Q15;
    X15 -> K15;
    X15 -> V15;
    
    // Attention computation flow
    Q0 -> stage0_0;
    K0 -> stage0_0;
    V0 -> stage0_0;
    stage0_0 -> stage1_0;
    stage1_0 -> stage2_0;
    stage15_0 -> output0;
    
    Q1 -> stage0_1;
    K1 -> stage0_1;
    V1 -> stage0_1;
    stage0_1 -> stage1_1;
    stage1_1 -> stage15_1;
    stage15_1 -> output1;
    
    Q2 -> stage0_2;
    K2 -> stage0_2;
    V2 -> stage0_2;
    stage0_2 -> stage1_2;
    stage1_2 -> stage15_2;
    stage15_2 -> output2;
    
    Q15 -> stage0_15;
    K15 -> stage0_15;
    V15 -> stage0_15;
    stage0_15 -> stage1_15;
    stage1_15 -> stage15_15;
    stage15_15 -> output15;
    
    // Output aggregation
    subgraph cluster_output {
        label="Output Aggregation";
        style=dashed;
        Output [label="Full Output\nB×L×d_model", shape=ellipse, fillcolor=lightblue];
    }
    
    output0 -> Output;
    output1 -> Output;
    output2 -> Output;
    output15 -> Output;
    
    // Legend
    subgraph cluster_legend {
        label="Legend";
        style=dotted;
        legend1 [label="Data Processing", fillcolor=lightyellow];
        legend2 [label="Linear Layer\n(Column Parallel)", fillcolor=lightcoral];
        legend3 [label="Attention Computation", fillcolor=lightcyan];
        legend4 [label="Communication\n(Red arrows)", color=red, style=dashed];
    }
}